
					
					
					
					
					
					
					--- PROBLEMS ---



			SELECT * FROM card_base;	
			SELECT * FROM customer_base;	
			SELECT * FROM fraud_base;	
			SELECT * FROM transcation_base;
	




1) How many customers have done transactions over 49000?

SELECT
	COUNT(DISTINCT CB.CUST_ID) AS NUMBER_OF_CUSTOMERS
FROM
	CARD_BASE CB
	INNER JOIN TRANSACTION_BASE TB ON CB.CARD_NUMBER = TB.CREDIT_CARD_ID
WHERE
	TB.TRANSACTION_VALUE > 49000;


2) What kind of customers can get a Premium credit card?

SELECT DISTINCT
	CB.CARD_FAMILY,
	CB.CUST_ID,
	CSB.CUSTOMER_SEGMENT
FROM
	CARD_BASE CB
	INNER JOIN CUSTOMER_BASE CSB ON CB.CUST_ID = CSB.CUST_ID
WHERE
	CB.CARD_FAMILY = 'Premium';


3) Identify the range of credit limit of customer who have done fraudulent transactions.

SELECT
	MIN(CB.CREDIT_LIMIT) AS MIN_CREDIT_LIMIT,
	MAX(CB.CREDIT_LIMIT) AS MAX_CREDIT_LIMIT
FROM
	CARD_BASE CB
	INNER JOIN TRANSACTION_BASE TB ON CB.CARD_NUMBER = TB.CREDIT_CARD_ID
	INNER JOIN FRAUD_BASE FB ON TB.TRANSACTION_ID = FB.TRANSACTION_ID;  



4) What is the average age of customers who are involved in fraud transactions based on different card type?


SELECT
	CB.CARD_FAMILY,
	ROUND(AVG(CSB.AGE), 2) AS AVG_AGE
FROM
	CUSTOMER_BASE CSB
	INNER JOIN CARD_BASE CB ON CB.CUST_ID = CSB.CUST_ID
	INNER JOIN TRANSACTION_BASE TB ON TB.CREDIT_CARD_ID = CB.CARD_NUMBER
	INNER JOIN FRAUD_BASE FB ON TB.TRANSACTION_ID = FB.TRANSACTION_ID
GROUP BY
	CB.CARD_FAMILY;


5) Identify the month when highest no of fraudulent transactions occured. 

SELECT
	TO_CHAR(TB.TRANSACTION_DATE, 'Month') AS MONTH,
	COUNT(*) AS FRAUD_COUNT
FROM
	TRANSACTION_BASE TB
	INNER JOIN FRAUD_BASE FB ON TB.TRANSACTION_ID = FB.TRANSACTION_ID
GROUP BY
	TO_CHAR(TB.TRANSACTION_DATE, 'Month')
ORDER BY
	FRAUD_COUNT DESC
LIMIT
	1;


6) Identify the customer who has done the most transaction value without involving in any fraudulent transactions.


SELECT
	CB.CUST_ID,
	SUM(TB.TRANSACTION_VALUE) AS TOTAL_TRANSACTION_VALUE
FROM
	CARD_BASE CB
	INNER JOIN TRANSACTION_BASE TB ON TB.CREDIT_CARD_ID = CB.CARD_NUMBER
WHERE
	CB.CUST_ID NOT IN (
		SELECT
			CB.CUST_ID
		FROM
			FRAUD_BASE FB
			INNER JOIN TRANSACTION_BASE TB2 ON FB.TRANSACTION_ID = TB2.TRANSACTION_ID
			INNER JOIN CARD_BASE CB ON TB2.CREDIT_CARD_ID = CB.CARD_NUMBER
	)
GROUP BY
	CB.CUST_ID
ORDER BY
	TOTAL_TRANSACTION_VALUE DESC
LIMIT
	1;


	